//  Copyright 2019 U.C. Berkeley RISE Lab
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

syntax = "proto3";

// A message to capture the periodic reporting of each server thread's local
// statistics; these are aggregated by the monioring system.
message ServerThreadStatistics {
  // What percentage of the server thread's storage capacity is being consumed.
  uint64 storage_consumption = 1;

  // What percentage of the server thread's compute capacity is being consumed.
  double occupancy = 2;

  // The server thread's reporting epoch.
  uint32 epoch = 3;

  // How many key accesses were serviced during this epoch.
  uint32 access_count = 4;
}

message DelayReport{
    string reporter_server_address = 1;

    string measured_server_address = 2;

    uint64 latency=3;
}

// A message to capture the access frequencies of individual keys for a
// particular server thread.
message KeyAccessData {
  // A mapping from an individual key to its access count.
  message KeyCount {
    message ServerAccess {
      string requester_address = 1;

      // The number of times this key was accessed during this epoch.
      uint32 access_count = 2;
    }

    // The key being tracked.
    string key = 1;

    // The access_type, i.e., GET or PUT
    // FIXME: Use something else than string for this
    string access_type = 2;

    repeated ServerAccess accesses = 3;
  }
  // A list of all the key access frequencies tracked during this epoch.
  repeated KeyCount keys = 1;
}

// An enum representing all the tiers the system supports -- currently, a
// memory tier and a disk-based tier.
enum Tier {
  TIER_UNSPECIFIED = 0;

  // The value for the memory tier.
  MEMORY = 1;

  // The value for the disk-based tier.
  DISK = 2;

  // The value for the routing tier.
  ROUTING = 3;
}

// A message to track which physical servers are a part of which Anna
// membership (memory, disk) tier.
message ClusterMembership {
  // The representation the servers comprising an individual tier.
  message TierMembership {
    // The IP addresses for an individual server -- the private/public IP
    // distinction is specific to EC2-based deployments.
    message Server {
      // The public IP address for a server.
      string public_ip = 1;

      // The private IP address for a server.
      string private_ip = 2;
    }

    // The Tier represented by this message -- either MEMORY or DISK.
    Tier tier_id = 1;

    // The list of servers in this tier.
    repeated Server servers = 2;
  }

  // The set of all tiers in the system.
  repeated TierMembership tiers = 1;
}

// A message to track metadata about how large each key in the system is.
message KeySizeData {
  // The size metadata for an individual key.
  message KeySize {
    // The key for which size metadata is being reported.
    string key = 1;

    // The size of the above key.
    uint32 size = 2;
  }

  // The list of key size metadata tuples being reported.
  repeated KeySize key_sizes = 1;
}

// A message that captures the replication factor for an individual key.
message ReplicationFactor {
  // A message representing the replication level for a single key at a
  // single tier.
  message ReplicationValue {
    // The tier represented by this message.
    Tier tier = 1;

    // The replication level at this particular tier for this particular key.
    uint32 value = 2;
  }

  // The name of the key whose replication factor is being changed.
  string key = 1;

  // A set of mappings from individual tiers (MEMORY, DISK -- see Tier enum)
  // to the cross-machine replication factor at that tier.
  repeated ReplicationValue global = 2;

  // A set of mappings from individual tiers (MEMORY, DISK -- see Tier enum)
  // to the intra-machine replication factor at that tier.
  repeated ReplicationValue local = 3;
}

// A message to propagate changes to a set of keys' replication factors.
message ReplicationFactorUpdate {
  // The set of replication factor updates being sent.
  repeated ReplicationFactor updates = 1;
}
