//  Copyright 2019 U.C. Berkeley RISE Lab
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

syntax = "proto3";

import "shared.proto";

// An enum to differentiate between different KVS requests.
enum RequestType {
  // A default type to capture unspecified requests.
  RT_UNSPECIFIED = 0;

  // A request to retrieve data from the KVS.
  GET = 1;

  // A request to put data into the KVS.
  PUT = 2;

  // A request to update slave data from the KVS.
  UPDATE = 3;

  // DEL
  DEL = 4;
}

enum LatticeType { 
  // No lattice type specified
  NONE = 0;

  // Last-writer wins lattice
  LWW = 1;

  // Unordered set lattice
  SET = 2;

  // Single-key causal lattice
  SINGLE_CAUSAL = 3;

  // Multi-key causal lattice
  MULTI_CAUSAL = 4;

  // Ordered-set lattice
  ORDERED_SET = 5;

  // Priority lattice
  PRIORITY = 6;
}

enum AnnaError {
  // The request did not have an error.
  NO_ERROR = 0;

  // The requested key does not exist.
  KEY_DNE = 1;

  // The request was sent to the wrong thread, which is not responsible for the
  // key.
  WRONG_THREAD = 2;

  // The request timed out.
  TIMEOUT = 3;

  // The lattice type was not correctly specified or conflicted with an
  // existing key.
  LATTICE = 4;

  // This error is returned by the routing tier if no servers are in the
  // cluster.
  NO_SERVERS = 5;
}

// ANNA KVS REQUESTS

// A protobuf to represent an individual key, both for requests and responses.
message UpdateKeyTuple {
  // The key name for this request/response.
  string key = 1;

  //The master server of the key, if it's stored yet.
  string master = 2;

  // Slave addresses.
  repeated string slaves = 3;
}


message UpdateKeyMessage{
  repeated UpdateKeyTuple key_updates = 1;

  uint64 iter=2;
}



// A protobuf to represent an individual key, both for requests and responses. 
message KeyTuple {
  // The key name for this request/response.
  string key = 1;

  // The lattice type for this key. Only required for server responses and PUT
  // requests.
  LatticeType lattice_type = 2;

  // The error type specified by the server (see AnnaError).
  AnnaError error = 3;

  // The data associated with this key.
  bytes payload = 4;

  // The number of server addresses the client is aware of for a particular
  // key; used for DHT membership change optimization.
  uint32 address_cache_size = 5;
  
  // A boolean set by the server if the client's address_cache_size does not
  // match the metadata stored by the server.
  bool invalidate = 6;

  //The master server of the key, if it's stored yet.
  string master = 7;

  //Reader Access pattern metadata for placement
  map<string, double> reader_rates = 8;

  //Writer Access pattern metadata for placement
  map<string, double> writer_rates = 9;

  //number of replicas metadata for placement
  uint64 replica_num = 10;

  //delete or store
  bool delete = 11;

}

// A message to measure delay between the sender the the receiver
message DelayRequest{

  uint64 timestamp = 1;

  // The IP-port pair at which the client is waiting for the server's response.
  string response_address = 2;

  string request_id = 3;
}

message DelayResponse{
  uint64 timestamp = 1;

  string sender_address = 2;

  string request_id = 3;
}

message PlacementRequest{

  string keys = 1;
  // The data associated with this key.
  bytes payload = 2;
  string request_id = 3;

}

// An individual GET or PUT request; each request can batch multiple keys.
message KeyRequest {
  // The type of this request (see RequestType).
  RequestType type = 1;

  // A list of KeyTuples batched in this request.
  repeated KeyTuple tuples = 2;

  // The IP-port pair at which the client is waiting for the server's response.
  string response_address = 3;

  // A client-specific ID used to match asynchronous requests with responses.
  string request_id = 4;
}

// A response to a KeyRequest. 
message KeyResponse {
  // The type of response being sent back to the client (see RequestType).
  RequestType type = 1;

  // The individual response pairs associated with this request. There is a
  // 1-to-1 mapping between these and the KeyTuples in the corresponding
  // KeyRequest.
  repeated KeyTuple tuples = 2;

  // The request_id specified in the corresponding KeyRequest. Used to
  // associate asynchornous requests and responses.
  string response_id = 3;

  // Any errors associated with the whole request. Individual tuple errors are
  // captured in the corresponding KeyTuple. This will only be set if the whole
  // request times out.
  AnnaError error = 4;

  string master_address = 5;
}

// A request to the routing tier to retrieve server addresses corresponding to
// individual keys.
message KeyAddressRequest {
  // The IP-port pair at which the client will await a response.
  string response_address = 1;

  // The names of the requested keys.
  repeated string keys = 2;

  // A unique ID used by the client to match asynchornous requests with
  // responses.
  string request_id = 3;

  // Type of the request: GET or PUT.
  string query_type = 4;
}

// A 1-to-1 response from the routing tier for individual KeyAddressRequests.
message KeyAddressResponse {
  // A mapping from individual keys to the set of servers responsible for that
  // key.
  message KeyAddress {
    // The specified key.
    string key = 1;
    
    // The IPs of the set of servers responsible for this key.
    repeated string ips = 2;

    // The type (GET or PUT) of the request.
    RequestType request_type=3;
  }
  
  // A batch of responses for individual keys.
  repeated KeyAddress addresses = 1;

  // An error reported by the routing tier. This should only ever be a timeout.
  AnnaError error = 2;

  // A unique ID used by the client to match asynchronous requests with
  // responses.
  string response_id = 3;
}

// LATTICE SERIALIZATION

// Serialization of last-write wins lattices.
message LWWValue {
  // The last-writer wins timestamp associated with this data.
  uint64 timestamp = 1;
  
  // The actual data stored by this LWWValue.
  bytes value = 2;
}

// Serialization of unordered set lattices.
message SetValue {
  // An unordered set of values in this lattice.
  repeated bytes values = 1;
}

// Serialization of a single-key causal lattice.
message SingleKeyCausalValue {
  // The vector clock for this key, which maps from unique client IDs to
  // monotonically increasing integers.
  map<string, uint32> vector_clock = 1;

  // The set of values associated with this causal value. There will only be
  // more than one here if there are multiple causally concurrent updates.
  repeated bytes values = 2;
}

// An individual multi-key causal lattice, along with its associated
// dependencies.
message MultiKeyCausalValue {
  // The vector clock associated with this particular key.
  map<string, uint32> vector_clock = 1;

  // The mapping from keys to vector clocks for each of the direct causal
  // dependencies this key has.
  repeated KeyVersion dependencies = 2;
  
  // The set of potentially causally concurrent values for this key.
  repeated bytes values = 3;
}

// Serialization of lowest-priority-wins lattices.
message PriorityValue {
  // The priority associated with this data
  double priority = 1;
  
  // The actual data stored by this PriorityValue
  bytes value = 2;
}
